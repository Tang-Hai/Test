//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "PLBaseWindowProvider.h"

#import "DUIMKSViewWindowDelegate.h"
#import "PLVMCommonWindowDelegate.h"
#import "PLVMWindowProvider.h"

@class NSMutableArray, NSMutableSet, NSString, PLFTBWindowController, PLFullScreenMessageWindowController, PLVMSession, PLVMWindowController;

@interface PLVMCommonWindowProvider : PLBaseWindowProvider <DUIMKSViewWindowDelegate, PLVMWindowProvider, PLVMCommonWindowDelegate>
{
    BOOL mDidSuspendDialogs;
    BOOL mIsChangingViewMode;
    BOOL mRunInBackground;
    BOOL mNeedsWindowUpdate;
    BOOL mDisableMinibar;
    BOOL mObservingDefaults;
    BOOL mIsInWindowTransition;
    BOOL _useDefaultMode;
    PLVMWindowController *mPrimaryWindowController;
    PLFullScreenMessageWindowController *mMessageWindowController;
    PLFTBWindowController *mFtbWindowController;
    NSMutableArray *mAuxWindowControllers;
    NSMutableSet *mPendingAnimationWindows;
    double mMenuDelay;
    PLVMSession *mSession;
}

+ (id)commonObservationKeyPaths;
@property(nonatomic) BOOL useDefaultMode; // @synthesize useDefaultMode=_useDefaultMode;
@property(retain, nonatomic) PLVMSession *session; // @synthesize session=mSession;
@property(nonatomic) double menuDelay; // @synthesize menuDelay=mMenuDelay;
@property(nonatomic) BOOL isInWindowTransition; // @synthesize isInWindowTransition=mIsInWindowTransition;
@property(nonatomic) BOOL observingDefaults; // @synthesize observingDefaults=mObservingDefaults;
@property(nonatomic) BOOL disableMinibar; // @synthesize disableMinibar=mDisableMinibar;
@property(nonatomic) BOOL needsWindowUpdate; // @synthesize needsWindowUpdate=mNeedsWindowUpdate;
@property(nonatomic) BOOL runInBackground; // @synthesize runInBackground=mRunInBackground;
@property(nonatomic) BOOL isChangingViewMode; // @synthesize isChangingViewMode=mIsChangingViewMode;
@property(retain, nonatomic) NSMutableSet *pendingAnimationWindows; // @synthesize pendingAnimationWindows=mPendingAnimationWindows;
@property(retain, nonatomic) NSMutableArray *auxWindowControllers; // @synthesize auxWindowControllers=mAuxWindowControllers;
@property(retain, nonatomic) PLFTBWindowController *ftbWindowController; // @synthesize ftbWindowController=mFtbWindowController;
@property(retain, nonatomic) PLFullScreenMessageWindowController *messageWindowController; // @synthesize messageWindowController=mMessageWindowController;
@property(retain, nonatomic) PLVMWindowController *primaryWindowController; // @synthesize primaryWindowController=mPrimaryWindowController;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)onLocalDefaultsChanged:(id)arg1;
- (void)configureWindowsForFSWorkaround;
- (unsigned long long)window:(id)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (void)syncWindows;
- (BOOL)windowShouldToggleFullScreen:(id)arg1;
- (void)windowDidFailToExitFullScreen:(id)arg1;
- (void)windowDidFailToEnterFullScreen:(id)arg1;
- (void)windowDidExitFullScreen:(id)arg1;
- (void)windowDidEnterFullScreen:(id)arg1;
- (void)windowWillExitFullScreen:(id)arg1;
- (void)windowWillEnterFullScreen:(id)arg1;
- (BOOL)window:(id)arg1 shouldPopUpDocumentPathMenu:(id)arg2;
- (BOOL)window:(id)arg1 shouldDragDocumentWithEvent:(id)arg2 from:(struct CGPoint)arg3 withPasteboard:(id)arg4;
- (void)windowDidBecomeKey:(id)arg1;
- (void)window:(id)arg1 updateUngrabRect:(struct CGRect)arg2;
- (struct CGRect)window:(id)arg1 willPositionSheet:(id)arg2 usingRect:(struct CGRect)arg3;
- (void)windowOnActiveSpaceDidChange:(id)arg1;
- (void)windowDidMove:(id)arg1;
- (void)windowDidResize:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (BOOL)shouldCloseSessionForWindowWillClose:(id)arg1;
- (BOOL)windowShouldClose:(id)arg1;
- (BOOL)hasPendingTabbedWindow:(id)arg1;
- (BOOL)windowShouldDisableClose:(id)arg1;
- (BOOL)shouldCloseSessionForWindowShouldClose:(id)arg1;
- (BOOL)windowIsBackgroundProcessing:(id)arg1;
- (BOOL)vmLayerWindowShouldClose:(id)arg1;
- (BOOL)windowIsVMLayerWindow:(id)arg1;
- (void)minibarSettingsDidChange;
- (void)updateMinibarOptions;
- (void)configureGrabState;
- (void)configureMenuState;
- (id)hostScreensForTopology;
- (void)configureMinibarShowPref;
- (void)configureHideMenuBar;
- (id)fullScreenSubmenu;
- (void)synchronizeWindowTitleWithDocumentName;
- (void)windowsDidFinishUpdate;
- (void)redisplayCurrentDialog;
- (void)suspendDialogDisplay;
- (BOOL)canSwitchVMLayers;
- (void)switchToFullScreen;
- (BOOL)isUnityLayer:(id)arg1;
- (BOOL)isInFullScreen;
- (void)updateActiveLayer;
- (void)updateSingleWindowActiveLayer;
- (void)updateWindowProviderForLayer:(id)arg1;
- (struct CGRect)constrainedContentRectForLayer:(id)arg1 withCurrentBounds:(struct CGRect)arg2;
- (struct CGRect)contentRectForLayer:(id)arg1;
- (void)showSettingsWindowWithItemKey:(id)arg1;
- (void)showSnapshotWindow;
- (id)createAuxWindowControllerWithKindOfClass:(Class)arg1;
- (id)settingsWindowController;
- (id)snapshotWindowController;
- (id)auxWindowControllerWithKindOfClass:(Class)arg1;
- (BOOL)restoreWindow:(id)arg1 withCoder:(id)arg2;
- (void)restoreSessionWindowWithIdentifier:(id)arg1 state:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)showWindowWithIdentifier:(id)arg1;
- (void)configureRestorableWindows;
- (void)configureRestorableWindows:(BOOL)arg1;
- (void)configureTitledWindow:(id)arg1;
- (void)closeContent:(id)arg1;
- (id)activeContent;
- (id)allContents;
- (void)close;
- (void)prepareToClose;
- (id)contentForWindow:(id)arg1;
- (void)orderFrontAllWindows:(BOOL)arg1;
- (void)showWindows;
- (void)showMKSWindows;
- (void)openWindows;
- (id)sortedAuxWindows;
- (id)keyMKSWindow;
- (id)allMKSWindows;
- (id)allWindows;
- (id)ftbDragWindow;
- (id)primaryWindow;
- (void)updateMessageWindow;
- (void)updateMessageWindowWithError:(id)arg1;
- (id)errorTextForError:(id)arg1;
- (id)windowForMessageWindow;
- (void)closeForBackgroundProcessing;
- (void)closeAllMKSWindows;
- (void)prepareToCloseVMLayerWindows;
- (void)mksWindowsChangedForLayer:(id)arg1;
- (void)exitRunInBackground;
- (void)runLayerInBackground;
- (void)updateWindowsForLayer:(id)arg1 shouldShow:(BOOL)arg2;
- (void)configureInitialWindowFrameForLayer:(id)arg1 window:(id)arg2;
- (BOOL)updateWindows;
- (void)onDisplayReconfigured:(id)arg1;
- (void)dealloc;
- (void)openWithSession:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

