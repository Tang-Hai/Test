//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "FUSController.h"

//#import "NSMenuDelegate.h"

@class DUIDockerControllerProxy, DUIPrefs, DUIUpdateWindowController, DUIWeakRef, NSMenu, NSMenuItem, NSMutableArray, NSMutableSet, NSString, PLActiveSessionResponder, PLInventoryManager, PLVMDiskCleanupManager, PLVMStartMenuManager;

@interface PLController : FUSController //<NSMenuDelegate>
{
    NSMenu *mainMenu;
    NSMenuItem *licensingMenuItem;
    BOOL userHasOpenedDocument;
    PLInventoryManager *defaultInventory;
    NSMutableSet *terminationDelegateRefs;
    BOOL mHasOpenDocumentEventAtStartup;
    BOOL mIsReadyToOpenDocuments;
    BOOL mDidFinishLaunching;
    DUIDockerControllerProxy *mDUIDockerControllerProxy;
    NSMutableArray *mFilesToImportAtStartup;
    NSMutableArray *mFilesToOpenAtStartup;
    NSMutableArray *mURLsToHandleAtStartup;
    PLActiveSessionResponder *mSessionResponder;
    DUIWeakRef *mWeakEvent;
    id mVmPowerStateChangeObserver;
    DUIUpdateWindowController *mUpdateWindowController;
    PLVMStartMenuManager *mStartMenuManager;
    PLVMDiskCleanupManager *mDiskCleanupManager;
}

+ (BOOL)isTranslocatedURL:(struct __CFURL *)arg1 withOriginalURL:(const struct __CFURL **)arg2;
+ (id)trialKeyForProductEdition:(int)arg1;
+ (id)sharedController;
+ (void)initialize;
@property(retain, nonatomic) PLVMDiskCleanupManager *diskCleanupManager; // @synthesize diskCleanupManager=mDiskCleanupManager;
@property(retain, nonatomic) PLVMStartMenuManager *startMenuManager; // @synthesize startMenuManager=mStartMenuManager;
@property(retain, nonatomic) id vmPowerStateChangeObserver; // @synthesize vmPowerStateChangeObserver=mVmPowerStateChangeObserver;
@property(retain, nonatomic) DUIWeakRef *weakEvent; // @synthesize weakEvent=mWeakEvent;
@property(retain, nonatomic) PLActiveSessionResponder *sessionResponder; // @synthesize sessionResponder=mSessionResponder;
@property(nonatomic) BOOL didFinishLaunching; // @synthesize didFinishLaunching=mDidFinishLaunching;
@property(nonatomic) BOOL isReadyToOpenDocuments; // @synthesize isReadyToOpenDocuments=mIsReadyToOpenDocuments;
@property(nonatomic) BOOL hasOpenDocumentEventAtStartup; // @synthesize hasOpenDocumentEventAtStartup=mHasOpenDocumentEventAtStartup;
@property(readonly, retain, nonatomic) PLInventoryManager *defaultInventory; // @synthesize defaultInventory;
@property(retain, nonatomic) NSMutableArray *urlsToHandleAtStartup; // @synthesize urlsToHandleAtStartup=mURLsToHandleAtStartup;
@property(retain, nonatomic) NSMutableArray *filesToOpenAtStartup; // @synthesize filesToOpenAtStartup=mFilesToOpenAtStartup;
@property(retain, nonatomic) NSMutableArray *filesToImportAtStartup; // @synthesize filesToImportAtStartup=mFilesToImportAtStartup;
@property(retain, nonatomic) DUIDockerControllerProxy *duiDockerControllerProxy; // @synthesize duiDockerControllerProxy=mDUIDockerControllerProxy;
- (void)onVixReloadCommand:(id)arg1;
- (id)restrictedVMInventoryPath;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)onSuspendedScreenshots:(id)arg1;
- (void)saveSuspendedScreenshots:(id)arg1 forVMWithID:(id)arg2;
- (void)removeCachedScreenshotsForVMWithID:(id)arg1;
- (id)loadCachedScreenshotsForVMWithID:(id)arg1;
- (id)screenshotCacheDirectoryForVMWithID:(id)arg1;
- (id)aboutBoxVersionString;
- (void)connectToServer:(id)arg1 withCaption:(id)arg2 onAbort:(CDUnknownBlockType)arg3 onDone:(CDUnknownBlockType)arg4;
- (CDUnknownBlockType)onConnectedToServerForLicenseDone:(id)arg1 onAbort:(CDUnknownBlockType)arg2 onDone:(CDUnknownBlockType)arg3;
- (BOOL)performPerVMHotKeyWithVMUUID:(id)arg1;
- (BOOL)performPerVMHotKeyWithEvent:(id)arg1;
- (id)perVMHotKeyWithEvent:(id)arg1;
- (void)onApplicationDidActivate:(id)arg1;
- (void)onVMPowerStateWillChange:(id)arg1;
- (void)onPowerOnInUnity:(id)arg1;
@property(readonly, retain, nonatomic) DUIPrefs *prefs;
- (void)showVideoTutorials:(id)arg1;
- (void)browseURL:(id)arg1;
- (void)collectSupportInformation;
- (id)allLocalVMNodes;
- (void)licenseAlertDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)showLicenseExpiration:(id)arg1;
- (void)addInventory:(id)arg1;
- (void)createPaschalOvumVM:(id)arg1;
- (void)exportOVFForURL:(id)arg1;
- (void)onExportOVF:(id)arg1;
- (void)openAndRunDocument:(id)arg1;
- (void)openDocument:(id)arg1;
- (id)URLsFromRunningOpenPanel;
- (id)vmOpenPanel;
- (void)runVMsForURLs:(id)arg1;
- (void)showWindowsForURLs:(id)arg1;
- (void)showWindowsForVMWithID:(id)arg1 allWindows:(BOOL)arg2;
- (void)showWindowsForVMWithID:(id)arg1;
- (id)actionControllerForVMWithNode:(id)arg1;
- (id)actionControllerForVMWithID:(id)arg1;
- (id)defaultActionController;
- (id)inventoryNodesForVMWithUUID:(id)arg1;
- (BOOL)application:(id)arg1 openFile:(id)arg2;
- (BOOL)isRVMDownloadFile:(id)arg1;
- (BOOL)isVMURL:(id)arg1;
- (void)setAccessibilityPriviledge;
- (BOOL)applicationShouldOpenUntitledFile:(id)arg1;
- (id)applicationDockMenu:(id)arg1;
- (id)libraryMenuItemFromMenu:(id)arg1;
- (void)updateWindowsMenu:(id)arg1;
- (void)applicationWillTerminate:(id)arg1;
- (BOOL)applicationShouldHandleReopen:(id)arg1 hasVisibleWindows:(BOOL)arg2;
- (void)onFindRunningVMsDoneWithPaths:(id)arg1;
- (void)applicationDidFinishLaunching:(id)arg1;
- (void)duiDidFinishInitialization;
- (void)applicationWillFinishLaunching:(id)arg1;
- (void)handleHotKeyEvent:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (id)itemInMenu:(id)arg1 forKeyDownEvent:(id)arg2;
- (void)updateAppSmartFolders;
- (BOOL)isFlexEdition;
- (BOOL)isProEdition;
- (void)onLicenseUpdated:(id)arg1;
- (void)handleGetURLEvent:(id)arg1 withReplyEvent:(id)arg2;
- (BOOL)isResizeMenu:(id)arg1;
- (BOOL)isFullScreenTitleBarMenu:(id)arg1;
- (void)updateVMMenu:(id)arg1;
- (void)updateFileMenu:(id)arg1;
- (BOOL)showVMIfOnlyOne;
- (void)menuNeedsUpdate:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (void)awakeFromNib;
- (id)fileMenu;
- (id)viewMenu;
- (id)vmMenu;
- (void)runSupportScript:(id)arg1;
- (void)showNewVMWizard:(id)arg1;
- (void)importPhysicalMachine:(id)arg1;
- (void)checkForUpdates:(id)arg1;
- (id)updateControllerDelegate;
@property(readonly, retain, nonatomic) DUIUpdateWindowController *updateWindowController; // @synthesize updateWindowController=mUpdateWindowController;
- (void)handleRVMURL:(id)arg1 fileURL:(id)arg2;
- (void)handleVMRCURL:(id)arg1;
- (void)handleRVMDownloadFileURL:(id)arg1;
- (id)serverURLFromRVMDownloadURL:(id)arg1;
- (void)handleURL:(id)arg1;
- (void)showNewVMWindowWithURLs:(id)arg1;
- (void)importDocument:(id)arg1;
- (void)autoScanVMs:(id)arg1;
- (void)createBootCampVM:(id)arg1;
- (void)finishShowingApplicationWindows;
- (void)showConnectToServer:(id)arg1;
- (void)showVMLibraryFromDock:(id)arg1;
- (void)showVMLibrary:(id)arg1;
- (void)showPrefs:(id)arg1;
- (void)showSupportId:(id)arg1;
- (void)showLicense:(id)arg1;
- (void)sendFeedback:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

