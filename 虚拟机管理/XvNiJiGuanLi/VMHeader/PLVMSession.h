//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "PLWindowedSession.h"

@class DUIActionController, DUICnx, DUIOpenedVM, NSObject<PLVMWindowProvider>, PLVM, PLVMLayer, PLVMUIConfig;

@interface PLVMSession : PLWindowedSession
{
    BOOL mIsObservingKeyPaths;
    PLVMLayer *mActiveLayer;
    PLVMLayer *mTargetLayer;
    BOOL mIsLayerOpen;
    BOOL mHasVMObservers;
    BOOL mNeedsWindowUpdate;
    int _viewMode;
    CDUnknownBlockType mOpenCompletionHandler;
    PLVMUIConfig *mConfig;
    DUIOpenedVM *mOpenedVM;
    DUIActionController *mActionController;
    DUICnx *mCnx;
}

+ (void)restoreWindowWithIdentifier:(id)arg1 state:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (id)vmSessionEnumerator;
+ (void)showSessionWindowWithRepresentedObject:(id)arg1;
+ (void)openSessionForVMWithID:(id)arg1 abortHandler:(CDUnknownBlockType)arg2 doneHandler:(CDUnknownBlockType)arg3;
+ (id)vmSessionWithVMID:(id)arg1;
+ (id)sessionForVMWithID:(id)arg1;
+ (id)observationKeyPaths;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (void)initialize;
@property(nonatomic) int viewMode; // @synthesize viewMode=_viewMode;
@property(retain, nonatomic) DUICnx *cnx; // @synthesize cnx=mCnx;
@property(nonatomic) BOOL needsWindowUpdate; // @synthesize needsWindowUpdate=mNeedsWindowUpdate;
@property(retain, nonatomic) DUIActionController *actionController; // @synthesize actionController=mActionController;
@property(retain, nonatomic) DUIOpenedVM *openedVM; // @synthesize openedVM=mOpenedVM;
@property(retain, nonatomic) PLVMUIConfig *config; // @synthesize config=mConfig;
@property(copy, nonatomic) CDUnknownBlockType openCompletionHandler; // @synthesize openCompletionHandler=mOpenCompletionHandler;
@property(nonatomic) BOOL hasVMObservers; // @synthesize hasVMObservers=mHasVMObservers;
@property(nonatomic) BOOL isLayerOpen; // @synthesize isLayerOpen=mIsLayerOpen;
@property(retain, nonatomic) PLVMLayer *targetLayer; // @synthesize targetLayer=mTargetLayer;
@property(retain, nonatomic) PLVMLayer *activeLayer; // @synthesize activeLayer=mActiveLayer;
- (id)description;
- (void)onNeedsLockVMChanged;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)onVMPowerStateWillChange:(id)arg1;
- (void)updateVMObservers;
- (BOOL)addWindowsMenusToMenu:(id)arg1 addSeparator:(BOOL)arg2 attachGuestAppsMenu:(BOOL)arg3 target:(id)arg4;
- (id)menuForLaunchItems:(id)arg1 target:(id)arg2;
- (id)windowMenuItemForWindow:(id)arg1 withTitle:(id)arg2 addToMenu:(id)arg3 target:(id)arg4;
- (void)onPowerStateTransitioningChanged;
- (void)showUnityConsole:(BOOL)arg1;
- (id)fullScreenSubmenu;
- (void)exitRunInBackground;
- (BOOL)updateAllSessionWindows;
- (void)showAllSessionWindows:(BOOL)arg1;
- (id)restoreVMLayer;
- (void)updateVMSessionWithDoneHandler:(CDUnknownBlockType)arg1;
- (void)closeLayer:(id)arg1;
- (void)onVMLayerDidTransitionFromPowerOn;
- (void)closeAfterUnityDidTransitionFromPowerOn;
- (void)switchToFullScreen;
- (void)switchToSingleWindow;
- (void)switchVMLayerToViewMode:(int)arg1;
- (void)switchToViewMode:(int)arg1;
- (void)minibarSettingsDidChange;
- (void)windowProviderDidUpdateForNewLayer:(id)arg1;
- (void)layerDidFailToOpen:(id)arg1;
- (void)layerDidOpen:(id)arg1;
- (void)installTargetLayer;
- (void)updateInstalledActiveLayer;
@property(readonly, nonatomic) int currentViewMode;
- (BOOL)windowShouldToggleFullScreen:(id)arg1;
- (void)windowWillExitNativeFullScreen:(id)arg1;
- (void)windowWillEnterNativeFullScreen:(id)arg1;
- (id)vmLayerForViewMode:(int)arg1;
- (id)vmLayer;
- (id)unityLayer;
- (id)allLayersAndContents;
@property(readonly, nonatomic) BOOL snapshotWindowIsShowing;
- (BOOL)canSwitchVMLayers;
- (void)closeSession;
- (void)prepareToCloseWithAbortHandler:(CDUnknownBlockType)arg1 doneHandler:(CDUnknownBlockType)arg2;
- (BOOL)canSessionCloseForTermination:(BOOL)arg1;
- (void)openWindows;
- (int)sessionType;
- (void)updateOpenedVM:(id)arg1;
- (void)openVMWithAbortHandler:(CDUnknownBlockType)arg1 doneHandler:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) PLVM *vm;
- (void)dealloc;
- (void)restoreSessionWindowWithIdentifier:(id)arg1 state:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)initWithVMID:(id)arg1;

// Remaining properties
@property(retain, nonatomic) NSObject<PLVMWindowProvider> *windowProvider; // @dynamic windowProvider;

@end

